// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: meter.proto

package meterus_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MeteringService_Ingest_FullMethodName            = "/meterus.meter.v1.MeteringService/Ingest"
	MeteringService_ListMeters_FullMethodName        = "/meterus.meter.v1.MeteringService/ListMeters"
	MeteringService_CreateMeter_FullMethodName       = "/meterus.meter.v1.MeteringService/CreateMeter"
	MeteringService_GetMeter_FullMethodName          = "/meterus.meter.v1.MeteringService/GetMeter"
	MeteringService_DeleteMeter_FullMethodName       = "/meterus.meter.v1.MeteringService/DeleteMeter"
	MeteringService_QueryMeter_FullMethodName        = "/meterus.meter.v1.MeteringService/QueryMeter"
	MeteringService_ListMeterSubjects_FullMethodName = "/meterus.meter.v1.MeteringService/ListMeterSubjects"
	MeteringService_ValidateApiKey_FullMethodName    = "/meterus.meter.v1.MeteringService/ValidateApiKey"
)

// MeteringServiceClient is the client API for MeteringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeteringServiceClient interface {
	Ingest(ctx context.Context, in *CloudEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMeters(ctx context.Context, in *ListMetersRequest, opts ...grpc.CallOption) (*ListMetersResponse, error)
	CreateMeter(ctx context.Context, in *CreateMeterRequest, opts ...grpc.CallOption) (*Meter, error)
	GetMeter(ctx context.Context, in *MeterId, opts ...grpc.CallOption) (*Meter, error)
	DeleteMeter(ctx context.Context, in *MeterId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	QueryMeter(ctx context.Context, in *QueryMeterRequest, opts ...grpc.CallOption) (*QueryMeterResponse, error)
	ListMeterSubjects(ctx context.Context, in *ListMeterSubjectsRequest, opts ...grpc.CallOption) (*ListMeterSubjectsResponse, error)
	ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error)
}

type meteringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeteringServiceClient(cc grpc.ClientConnInterface) MeteringServiceClient {
	return &meteringServiceClient{cc}
}

func (c *meteringServiceClient) Ingest(ctx context.Context, in *CloudEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MeteringService_Ingest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) ListMeters(ctx context.Context, in *ListMetersRequest, opts ...grpc.CallOption) (*ListMetersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMetersResponse)
	err := c.cc.Invoke(ctx, MeteringService_ListMeters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) CreateMeter(ctx context.Context, in *CreateMeterRequest, opts ...grpc.CallOption) (*Meter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meter)
	err := c.cc.Invoke(ctx, MeteringService_CreateMeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) GetMeter(ctx context.Context, in *MeterId, opts ...grpc.CallOption) (*Meter, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meter)
	err := c.cc.Invoke(ctx, MeteringService_GetMeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) DeleteMeter(ctx context.Context, in *MeterId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MeteringService_DeleteMeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) QueryMeter(ctx context.Context, in *QueryMeterRequest, opts ...grpc.CallOption) (*QueryMeterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMeterResponse)
	err := c.cc.Invoke(ctx, MeteringService_QueryMeter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) ListMeterSubjects(ctx context.Context, in *ListMeterSubjectsRequest, opts ...grpc.CallOption) (*ListMeterSubjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMeterSubjectsResponse)
	err := c.cc.Invoke(ctx, MeteringService_ListMeterSubjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meteringServiceClient) ValidateApiKey(ctx context.Context, in *ValidateApiKeyRequest, opts ...grpc.CallOption) (*ValidateApiKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateApiKeyResponse)
	err := c.cc.Invoke(ctx, MeteringService_ValidateApiKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeteringServiceServer is the server API for MeteringService service.
// All implementations must embed UnimplementedMeteringServiceServer
// for forward compatibility.
type MeteringServiceServer interface {
	Ingest(context.Context, *CloudEvent) (*emptypb.Empty, error)
	ListMeters(context.Context, *ListMetersRequest) (*ListMetersResponse, error)
	CreateMeter(context.Context, *CreateMeterRequest) (*Meter, error)
	GetMeter(context.Context, *MeterId) (*Meter, error)
	DeleteMeter(context.Context, *MeterId) (*emptypb.Empty, error)
	QueryMeter(context.Context, *QueryMeterRequest) (*QueryMeterResponse, error)
	ListMeterSubjects(context.Context, *ListMeterSubjectsRequest) (*ListMeterSubjectsResponse, error)
	ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error)
	mustEmbedUnimplementedMeteringServiceServer()
}

// UnimplementedMeteringServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMeteringServiceServer struct{}

func (UnimplementedMeteringServiceServer) Ingest(context.Context, *CloudEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ingest not implemented")
}
func (UnimplementedMeteringServiceServer) ListMeters(context.Context, *ListMetersRequest) (*ListMetersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeters not implemented")
}
func (UnimplementedMeteringServiceServer) CreateMeter(context.Context, *CreateMeterRequest) (*Meter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeter not implemented")
}
func (UnimplementedMeteringServiceServer) GetMeter(context.Context, *MeterId) (*Meter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeter not implemented")
}
func (UnimplementedMeteringServiceServer) DeleteMeter(context.Context, *MeterId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeter not implemented")
}
func (UnimplementedMeteringServiceServer) QueryMeter(context.Context, *QueryMeterRequest) (*QueryMeterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMeter not implemented")
}
func (UnimplementedMeteringServiceServer) ListMeterSubjects(context.Context, *ListMeterSubjectsRequest) (*ListMeterSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeterSubjects not implemented")
}
func (UnimplementedMeteringServiceServer) ValidateApiKey(context.Context, *ValidateApiKeyRequest) (*ValidateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateApiKey not implemented")
}
func (UnimplementedMeteringServiceServer) mustEmbedUnimplementedMeteringServiceServer() {}
func (UnimplementedMeteringServiceServer) testEmbeddedByValue()                         {}

// UnsafeMeteringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeteringServiceServer will
// result in compilation errors.
type UnsafeMeteringServiceServer interface {
	mustEmbedUnimplementedMeteringServiceServer()
}

func RegisterMeteringServiceServer(s grpc.ServiceRegistrar, srv MeteringServiceServer) {
	// If the following call pancis, it indicates UnimplementedMeteringServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MeteringService_ServiceDesc, srv)
}

func _MeteringService_Ingest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).Ingest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_Ingest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).Ingest(ctx, req.(*CloudEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_ListMeters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).ListMeters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_ListMeters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).ListMeters(ctx, req.(*ListMetersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_CreateMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).CreateMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_CreateMeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).CreateMeter(ctx, req.(*CreateMeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_GetMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).GetMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_GetMeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).GetMeter(ctx, req.(*MeterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_DeleteMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).DeleteMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_DeleteMeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).DeleteMeter(ctx, req.(*MeterId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_QueryMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).QueryMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_QueryMeter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).QueryMeter(ctx, req.(*QueryMeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_ListMeterSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeterSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).ListMeterSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_ListMeterSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).ListMeterSubjects(ctx, req.(*ListMeterSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeteringService_ValidateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateApiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeteringServiceServer).ValidateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeteringService_ValidateApiKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeteringServiceServer).ValidateApiKey(ctx, req.(*ValidateApiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeteringService_ServiceDesc is the grpc.ServiceDesc for MeteringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeteringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meterus.meter.v1.MeteringService",
	HandlerType: (*MeteringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ingest",
			Handler:    _MeteringService_Ingest_Handler,
		},
		{
			MethodName: "ListMeters",
			Handler:    _MeteringService_ListMeters_Handler,
		},
		{
			MethodName: "CreateMeter",
			Handler:    _MeteringService_CreateMeter_Handler,
		},
		{
			MethodName: "GetMeter",
			Handler:    _MeteringService_GetMeter_Handler,
		},
		{
			MethodName: "DeleteMeter",
			Handler:    _MeteringService_DeleteMeter_Handler,
		},
		{
			MethodName: "QueryMeter",
			Handler:    _MeteringService_QueryMeter_Handler,
		},
		{
			MethodName: "ListMeterSubjects",
			Handler:    _MeteringService_ListMeterSubjects_Handler,
		},
		{
			MethodName: "ValidateApiKey",
			Handler:    _MeteringService_ValidateApiKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meter.proto",
}
