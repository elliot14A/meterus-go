// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: v1/meter.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Aggregation int32

const (
	Aggregation_AGGREGATION_COUNT        Aggregation = 0
	Aggregation_AGGREGATION_SUM          Aggregation = 1
	Aggregation_AGGREGATION_AVG          Aggregation = 2
	Aggregation_AGGREGATION_UNIQUE_COUNT Aggregation = 3
	Aggregation_AGGREGATION_MIN          Aggregation = 4
	Aggregation_AGGREGATION_MAX          Aggregation = 5
)

// Enum value maps for Aggregation.
var (
	Aggregation_name = map[int32]string{
		0: "AGGREGATION_COUNT",
		1: "AGGREGATION_SUM",
		2: "AGGREGATION_AVG",
		3: "AGGREGATION_UNIQUE_COUNT",
		4: "AGGREGATION_MIN",
		5: "AGGREGATION_MAX",
	}
	Aggregation_value = map[string]int32{
		"AGGREGATION_COUNT":        0,
		"AGGREGATION_SUM":          1,
		"AGGREGATION_AVG":          2,
		"AGGREGATION_UNIQUE_COUNT": 3,
		"AGGREGATION_MIN":          4,
		"AGGREGATION_MAX":          5,
	}
)

func (x Aggregation) Enum() *Aggregation {
	p := new(Aggregation)
	*p = x
	return p
}

func (x Aggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_meter_proto_enumTypes[0].Descriptor()
}

func (Aggregation) Type() protoreflect.EnumType {
	return &file_v1_meter_proto_enumTypes[0]
}

func (x Aggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregation.Descriptor instead.
func (Aggregation) EnumDescriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{0}
}

type ListMetersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListMetersRequest) Reset() {
	*x = ListMetersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetersRequest) ProtoMessage() {}

func (x *ListMetersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetersRequest.ProtoReflect.Descriptor instead.
func (*ListMetersRequest) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{0}
}

func (x *ListMetersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListMetersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type CloudEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source      string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	SpecVersion string                 `protobuf:"bytes,3,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	Type        string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Time        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Subject     string                 `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	Data        *structpb.Struct       `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CloudEvent) Reset() {
	*x = CloudEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudEvent) ProtoMessage() {}

func (x *CloudEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudEvent.ProtoReflect.Descriptor instead.
func (*CloudEvent) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{1}
}

func (x *CloudEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloudEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CloudEvent) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *CloudEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CloudEvent) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CloudEvent) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CloudEvent) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListMetersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meters []*Meter `protobuf:"bytes,1,rep,name=meters,proto3" json:"meters,omitempty"`
}

func (x *ListMetersResponse) Reset() {
	*x = ListMetersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMetersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMetersResponse) ProtoMessage() {}

func (x *ListMetersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMetersResponse.ProtoReflect.Descriptor instead.
func (*ListMetersResponse) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{2}
}

func (x *ListMetersResponse) GetMeters() []*Meter {
	if x != nil {
		return x.Meters
	}
	return nil
}

type MeterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterIdOrSlug string `protobuf:"bytes,1,opt,name=meter_id_or_slug,json=meterIdOrSlug,proto3" json:"meter_id_or_slug,omitempty"`
}

func (x *MeterId) Reset() {
	*x = MeterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterId) ProtoMessage() {}

func (x *MeterId) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterId.ProtoReflect.Descriptor instead.
func (*MeterId) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{3}
}

func (x *MeterId) GetMeterIdOrSlug() string {
	if x != nil {
		return x.MeterIdOrSlug
	}
	return ""
}

type QueryMeterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterIdOrSlug  string                        `protobuf:"bytes,1,opt,name=meter_id_or_slug,json=meterIdOrSlug,proto3" json:"meter_id_or_slug,omitempty"`
	From           *timestamppb.Timestamp        `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To             *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Subject        []string                      `protobuf:"bytes,4,rep,name=subject,proto3" json:"subject,omitempty"`
	FilterGroupBy  map[string]*FilterGroupValues `protobuf:"bytes,5,rep,name=filter_group_by,json=filterGroupBy,proto3" json:"filter_group_by,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GroupBy        []string                      `protobuf:"bytes,6,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	WindowSize     string                        `protobuf:"bytes,7,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	WindowTimeZone string                        `protobuf:"bytes,8,opt,name=window_time_zone,json=windowTimeZone,proto3" json:"window_time_zone,omitempty"`
}

func (x *QueryMeterRequest) Reset() {
	*x = QueryMeterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMeterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMeterRequest) ProtoMessage() {}

func (x *QueryMeterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMeterRequest.ProtoReflect.Descriptor instead.
func (*QueryMeterRequest) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{4}
}

func (x *QueryMeterRequest) GetMeterIdOrSlug() string {
	if x != nil {
		return x.MeterIdOrSlug
	}
	return ""
}

func (x *QueryMeterRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *QueryMeterRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *QueryMeterRequest) GetSubject() []string {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *QueryMeterRequest) GetFilterGroupBy() map[string]*FilterGroupValues {
	if x != nil {
		return x.FilterGroupBy
	}
	return nil
}

func (x *QueryMeterRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *QueryMeterRequest) GetWindowSize() string {
	if x != nil {
		return x.WindowSize
	}
	return ""
}

func (x *QueryMeterRequest) GetWindowTimeZone() string {
	if x != nil {
		return x.WindowTimeZone
	}
	return ""
}

type FilterGroupValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FilterGroupValues) Reset() {
	*x = FilterGroupValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterGroupValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterGroupValues) ProtoMessage() {}

func (x *FilterGroupValues) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterGroupValues.ProtoReflect.Descriptor instead.
func (*FilterGroupValues) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{5}
}

func (x *FilterGroupValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ListMeterSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterIdOrSlug string `protobuf:"bytes,1,opt,name=meter_id_or_slug,json=meterIdOrSlug,proto3" json:"meter_id_or_slug,omitempty"`
}

func (x *ListMeterSubjectsRequest) Reset() {
	*x = ListMeterSubjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMeterSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeterSubjectsRequest) ProtoMessage() {}

func (x *ListMeterSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeterSubjectsRequest.ProtoReflect.Descriptor instead.
func (*ListMeterSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{6}
}

func (x *ListMeterSubjectsRequest) GetMeterIdOrSlug() string {
	if x != nil {
		return x.MeterIdOrSlug
	}
	return ""
}

type ListMeterSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []string `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *ListMeterSubjectsResponse) Reset() {
	*x = ListMeterSubjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMeterSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMeterSubjectsResponse) ProtoMessage() {}

func (x *ListMeterSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMeterSubjectsResponse.ProtoReflect.Descriptor instead.
func (*ListMeterSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{7}
}

func (x *ListMeterSubjectsResponse) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type Meter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Aggregation   Aggregation            `protobuf:"varint,4,opt,name=aggregation,proto3,enum=meterus.meter.v1.Aggregation" json:"aggregation,omitempty"`
	ValueProperty *string                `protobuf:"bytes,5,opt,name=value_property,json=valueProperty,proto3,oneof" json:"value_property,omitempty"`
	GroupBy       []string               `protobuf:"bytes,6,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	EventType     string                 `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Meter) Reset() {
	*x = Meter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meter) ProtoMessage() {}

func (x *Meter) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meter.ProtoReflect.Descriptor instead.
func (*Meter) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{8}
}

func (x *Meter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Meter) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Meter) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Meter) GetAggregation() Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Aggregation_AGGREGATION_COUNT
}

func (x *Meter) GetValueProperty() string {
	if x != nil && x.ValueProperty != nil {
		return *x.ValueProperty
	}
	return ""
}

func (x *Meter) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *Meter) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Meter) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Meter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Meter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateMeterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slug          string      `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Description   *string     `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ValueProperty *string     `protobuf:"bytes,3,opt,name=value_property,json=valueProperty,proto3,oneof" json:"value_property,omitempty"`
	Aggregation   Aggregation `protobuf:"varint,4,opt,name=aggregation,proto3,enum=meterus.meter.v1.Aggregation" json:"aggregation,omitempty"`
	GroupBy       []string    `protobuf:"bytes,5,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	CreatedBy     string      `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	EventType     string      `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
}

func (x *CreateMeterRequest) Reset() {
	*x = CreateMeterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMeterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeterRequest) ProtoMessage() {}

func (x *CreateMeterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeterRequest.ProtoReflect.Descriptor instead.
func (*CreateMeterRequest) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMeterRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateMeterRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateMeterRequest) GetValueProperty() string {
	if x != nil && x.ValueProperty != nil {
		return *x.ValueProperty
	}
	return ""
}

func (x *CreateMeterRequest) GetAggregation() Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return Aggregation_AGGREGATION_COUNT
}

func (x *CreateMeterRequest) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *CreateMeterRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *CreateMeterRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

type QueryMeterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*QueryMeterRow       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	From       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	WindowSize string                 `protobuf:"bytes,4,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
}

func (x *QueryMeterResponse) Reset() {
	*x = QueryMeterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMeterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMeterResponse) ProtoMessage() {}

func (x *QueryMeterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMeterResponse.ProtoReflect.Descriptor instead.
func (*QueryMeterResponse) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{10}
}

func (x *QueryMeterResponse) GetData() []*QueryMeterRow {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryMeterResponse) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *QueryMeterResponse) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *QueryMeterResponse) GetWindowSize() string {
	if x != nil {
		return x.WindowSize
	}
	return ""
}

type QueryMeterRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Value   float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	GroupBy *structpb.Struct       `protobuf:"bytes,4,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
}

func (x *QueryMeterRow) Reset() {
	*x = QueryMeterRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_meter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMeterRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMeterRow) ProtoMessage() {}

func (x *QueryMeterRow) ProtoReflect() protoreflect.Message {
	mi := &file_v1_meter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMeterRow.ProtoReflect.Descriptor instead.
func (*QueryMeterRow) Descriptor() ([]byte, []int) {
	return file_v1_meter_proto_rawDescGZIP(), []int{11}
}

func (x *QueryMeterRow) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *QueryMeterRow) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *QueryMeterRow) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *QueryMeterRow) GetGroupBy() *structpb.Struct {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

var File_v1_meter_proto protoreflect.FileDescriptor

var file_v1_meter_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe2, 0x01,
	0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x45, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x32, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x53, 0x6c, 0x75, 0x67, 0x22, 0xdf, 0x03,
	0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x1a, 0x65, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2b, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x53, 0x6c, 0x75,
	0x67, 0x22, 0x37, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xb1, 0x03, 0x0a, 0x05, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xb8,
	0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x2a, 0x96, 0x01, 0x0a, 0x0b, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x05, 0x32, 0xc1, 0x04, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x24, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x57, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x23,
	0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a,
	0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x6c, 0x69, 0x6f, 0x74, 0x31, 0x34, 0x41, 0x2f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x75, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_meter_proto_rawDescOnce sync.Once
	file_v1_meter_proto_rawDescData = file_v1_meter_proto_rawDesc
)

func file_v1_meter_proto_rawDescGZIP() []byte {
	file_v1_meter_proto_rawDescOnce.Do(func() {
		file_v1_meter_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_meter_proto_rawDescData)
	})
	return file_v1_meter_proto_rawDescData
}

var file_v1_meter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_meter_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_v1_meter_proto_goTypes = []any{
	(Aggregation)(0),                  // 0: meterus.meter.v1.Aggregation
	(*ListMetersRequest)(nil),         // 1: meterus.meter.v1.ListMetersRequest
	(*CloudEvent)(nil),                // 2: meterus.meter.v1.CloudEvent
	(*ListMetersResponse)(nil),        // 3: meterus.meter.v1.ListMetersResponse
	(*MeterId)(nil),                   // 4: meterus.meter.v1.MeterId
	(*QueryMeterRequest)(nil),         // 5: meterus.meter.v1.QueryMeterRequest
	(*FilterGroupValues)(nil),         // 6: meterus.meter.v1.FilterGroupValues
	(*ListMeterSubjectsRequest)(nil),  // 7: meterus.meter.v1.ListMeterSubjectsRequest
	(*ListMeterSubjectsResponse)(nil), // 8: meterus.meter.v1.ListMeterSubjectsResponse
	(*Meter)(nil),                     // 9: meterus.meter.v1.Meter
	(*CreateMeterRequest)(nil),        // 10: meterus.meter.v1.CreateMeterRequest
	(*QueryMeterResponse)(nil),        // 11: meterus.meter.v1.QueryMeterResponse
	(*QueryMeterRow)(nil),             // 12: meterus.meter.v1.QueryMeterRow
	nil,                               // 13: meterus.meter.v1.QueryMeterRequest.FilterGroupByEntry
	(*timestamppb.Timestamp)(nil),     // 14: google.protobuf.Timestamp
	(*structpb.Struct)(nil),           // 15: google.protobuf.Struct
	(*emptypb.Empty)(nil),             // 16: google.protobuf.Empty
}
var file_v1_meter_proto_depIdxs = []int32{
	14, // 0: meterus.meter.v1.CloudEvent.time:type_name -> google.protobuf.Timestamp
	15, // 1: meterus.meter.v1.CloudEvent.data:type_name -> google.protobuf.Struct
	9,  // 2: meterus.meter.v1.ListMetersResponse.meters:type_name -> meterus.meter.v1.Meter
	14, // 3: meterus.meter.v1.QueryMeterRequest.from:type_name -> google.protobuf.Timestamp
	14, // 4: meterus.meter.v1.QueryMeterRequest.to:type_name -> google.protobuf.Timestamp
	13, // 5: meterus.meter.v1.QueryMeterRequest.filter_group_by:type_name -> meterus.meter.v1.QueryMeterRequest.FilterGroupByEntry
	0,  // 6: meterus.meter.v1.Meter.aggregation:type_name -> meterus.meter.v1.Aggregation
	14, // 7: meterus.meter.v1.Meter.created_at:type_name -> google.protobuf.Timestamp
	14, // 8: meterus.meter.v1.Meter.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 9: meterus.meter.v1.CreateMeterRequest.aggregation:type_name -> meterus.meter.v1.Aggregation
	12, // 10: meterus.meter.v1.QueryMeterResponse.data:type_name -> meterus.meter.v1.QueryMeterRow
	14, // 11: meterus.meter.v1.QueryMeterResponse.from:type_name -> google.protobuf.Timestamp
	14, // 12: meterus.meter.v1.QueryMeterResponse.to:type_name -> google.protobuf.Timestamp
	14, // 13: meterus.meter.v1.QueryMeterRow.from:type_name -> google.protobuf.Timestamp
	14, // 14: meterus.meter.v1.QueryMeterRow.to:type_name -> google.protobuf.Timestamp
	15, // 15: meterus.meter.v1.QueryMeterRow.group_by:type_name -> google.protobuf.Struct
	6,  // 16: meterus.meter.v1.QueryMeterRequest.FilterGroupByEntry.value:type_name -> meterus.meter.v1.FilterGroupValues
	2,  // 17: meterus.meter.v1.MeteringService.Ingest:input_type -> meterus.meter.v1.CloudEvent
	1,  // 18: meterus.meter.v1.MeteringService.ListMeters:input_type -> meterus.meter.v1.ListMetersRequest
	10, // 19: meterus.meter.v1.MeteringService.CreateMeter:input_type -> meterus.meter.v1.CreateMeterRequest
	4,  // 20: meterus.meter.v1.MeteringService.GetMeter:input_type -> meterus.meter.v1.MeterId
	4,  // 21: meterus.meter.v1.MeteringService.DeleteMeter:input_type -> meterus.meter.v1.MeterId
	5,  // 22: meterus.meter.v1.MeteringService.QueryMeter:input_type -> meterus.meter.v1.QueryMeterRequest
	7,  // 23: meterus.meter.v1.MeteringService.ListMeterSubjects:input_type -> meterus.meter.v1.ListMeterSubjectsRequest
	16, // 24: meterus.meter.v1.MeteringService.Ingest:output_type -> google.protobuf.Empty
	3,  // 25: meterus.meter.v1.MeteringService.ListMeters:output_type -> meterus.meter.v1.ListMetersResponse
	9,  // 26: meterus.meter.v1.MeteringService.CreateMeter:output_type -> meterus.meter.v1.Meter
	9,  // 27: meterus.meter.v1.MeteringService.GetMeter:output_type -> meterus.meter.v1.Meter
	16, // 28: meterus.meter.v1.MeteringService.DeleteMeter:output_type -> google.protobuf.Empty
	11, // 29: meterus.meter.v1.MeteringService.QueryMeter:output_type -> meterus.meter.v1.QueryMeterResponse
	8,  // 30: meterus.meter.v1.MeteringService.ListMeterSubjects:output_type -> meterus.meter.v1.ListMeterSubjectsResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_v1_meter_proto_init() }
func file_v1_meter_proto_init() {
	if File_v1_meter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_meter_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListMetersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CloudEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListMetersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MeterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*QueryMeterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FilterGroupValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListMeterSubjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListMeterSubjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Meter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateMeterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*QueryMeterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_meter_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*QueryMeterRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_meter_proto_msgTypes[8].OneofWrappers = []any{}
	file_v1_meter_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_meter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_meter_proto_goTypes,
		DependencyIndexes: file_v1_meter_proto_depIdxs,
		EnumInfos:         file_v1_meter_proto_enumTypes,
		MessageInfos:      file_v1_meter_proto_msgTypes,
	}.Build()
	File_v1_meter_proto = out.File
	file_v1_meter_proto_rawDesc = nil
	file_v1_meter_proto_goTypes = nil
	file_v1_meter_proto_depIdxs = nil
}
